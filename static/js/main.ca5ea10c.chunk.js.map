{"version":3,"sources":["components/select.js","components/form.js","components/title.js","components/App.js","serviceWorker.js","index.js"],"names":["SelectedOp","props","react_default","a","createElement","react_select_esm","value","onChange","options","Form","type","className","name","e","arrInfo","target","onInputChange","id","htmlFor","label","components_select","onChangeSelec","Title","title","App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","info","console","log","setState","infoState","state","concat","selectedOption","onSubmit","preventDefault","_this2","form","config","questions","map","item","index","result","fields","push","key","length","components_title","i","components_form","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_components_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.ca5ea10c.chunk.js","sourcesContent":["import React from 'react';\r\nimport Select from 'react-select';\r\n\r\n\r\nconst SelectedOp = (props) => {\r\n\r\nreturn (\r\n    <Select\r\n    value='pais'\r\n    onChange={props.onChange}\r\n    options={props.options}\r\n    />\r\n);\r\n\r\n}\r\n\r\nexport default SelectedOp;","import React from 'react';\r\n\r\nimport SelectedOp from './select';\r\n\r\n\r\nconst Form = (props) => {\r\n\tconst onChange = (e) => {\r\n\t\tconst arrInfo = [e.target.value];\r\n\t\tprops.onInputChange(arrInfo)\r\n\t}\r\n\tif(props.type !== 'dropdown') {\r\n\t\treturn (\r\n\t\t\t<div className='input-field col s6'>\r\n\t\t\t\t<input \r\n\t\t\t\t\tname={props.name} \r\n\t\t\t\t\ttype={props.type}\r\n\t\t\t\t\tonChange={onChange} \r\n\t\t\t\t\tid='autocomplete-input' \r\n\t\t\t\t\tclassName='autocomplete' \r\n\t\t\t\t/>\r\n\t\t\t\t<label htmlFor='autocomplete-input'>{props.label}</label>\r\n\t\t\t</div>\r\n\t\t);\r\n\t} else {\r\n\t\treturn (\r\n\t\t\t<div className='input-field col s6'>\r\n\t\t\t\t<SelectedOp \r\n\t\t\t\t\toptions={props.options}\r\n\t\t\t\t\tonChange={props.onChangeSelec}\r\n\t\t\t\t/>\r\n\t\t\t</div>\r\n\t\t);\r\n\t}\r\n};\r\n\r\nexport default Form;","import React from 'react';\r\n\r\nconst Title = (props) => {\r\n  return(\r\n\t\t<h3>\r\n\t\t\t{props.title}\r\n\t\t</h3>\r\n\t);\r\n};\r\n\r\nexport default Title;","import React, { Component } from 'react';\r\n\r\nimport './App.css';\r\n\r\nimport config from '../config/config.json';\r\n\r\nimport Form from './form';\r\nimport Title from './title';\r\n\r\nclass App extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      infoState: []\r\n    };\r\n  }\r\n\r\n    \r\n  onInputChange = (info) => {\r\n    console.log(info);\r\n    this.setState({\r\n      infoState: this.state.infoState.concat(info)\r\n    })\r\n  }\r\n\r\n  onChangeSelec = (selectedOption) => {\r\n    console.log(selectedOption);\r\n    const arrInfo = [selectedOption] \r\n    this.setState({ \r\n      infoState: this.state.infoState.concat(arrInfo)\r\n    });\r\n  }\r\n\r\n  onSubmit =(e) => {\r\n\t\te.preventDefault();\r\n    console.log(this.state);\r\n\t}\r\n\r\n  render() {\r\n    \r\n    // eslint-disable-next-line array-callback-return\r\n    const form = config.questions.map((item, index) => {\r\n      const result =[];\r\n      const title=item.title;\r\n      const fields = item.fields;\r\n      result.push((\r\n        <div key={`${title.length}-${index}`}>\r\n          <Title\r\n            title={title}\r\n          />\r\n        </div>\r\n      ))\r\n      for(let i = 0; i<fields.length; i++) {\r\n        result.push((\r\n        <div key = {`${title.length}-${index}-${i}`} >\r\n          <Form \r\n            onChangeSelec={this.onChangeSelec}\r\n            onInputChange={this.onInputChange}\r\n            options = {fields[i].options}\r\n            value={this.state.value}\r\n            name={fields[i].name}\r\n            type={fields[i].type}\r\n            label={fields[i].label}/>\r\n          </div>));\r\n        }\r\n        return result;\r\n    });\r\n\r\n\r\n    return (\r\n      <div className='App'>\r\n        <form className='row' onSubmit={this.onSubmit}>\r\n          <div className='col s12'>\r\n            {form}\r\n          </div>\r\n          <button className='btn-large waves-effect waves-light  green lighten-1' type='submit' name='action'>Submit\r\n            <i className='material-icons right'>send</i>\r\n          </button>\r\n        </form> \r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './components/App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: http://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}