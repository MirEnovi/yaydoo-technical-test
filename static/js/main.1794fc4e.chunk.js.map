{"version":3,"sources":["components/title.js","components/select.js","components/form.js","components/card.js","components/App.js","serviceWorker.js","index.js"],"names":["Title","props","react_default","a","createElement","title","SelectedOp","react_select_esm","value","onChange","onChangeS","options","Form","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","onChangeI","e","target","name","onSubmit","preventDefault","cardInfo","state","input","_this2","form","config","questions","map","item","index","result","fields","push","key","concat","length","components_title","i","nameJ","type","className","inputs","id","htmlFor","label","components_select","valueSelect","Component","CardInfo","infoState","divStyle","display","style","first_name","last_name","selectedOption","email","phone_number","post_code","street_address","App","console","log","setState","styleCard","handleChange","onChangeInput","defineProperty","_this$state","components_form","card","Boolean","window","location","hostname","match","ReactDOM","render","src_components_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.1794fc4e.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Title = (props) => {\r\n  return(\r\n\t\t<h3>\r\n\t\t\t{props.title}\r\n\t\t</h3>\r\n\t);\r\n};\r\n\r\nexport default Title;","import React from 'react';\r\nimport Select from 'react-select';\r\n\r\n\r\nconst SelectedOp = (props) => {\r\nreturn (\r\n    <Select\r\n    value={props.value}\r\n    onChange={props.onChangeS}\r\n    options={props.options}\r\n    />\r\n);\r\n\r\n}\r\n\r\nexport default SelectedOp;","import React, { Component } from 'react';\r\n\r\nimport Title from './title';\r\nimport SelectedOp from './select';\r\n\r\nimport config from '../config/config.json';\r\n\r\n\r\nclass Form extends Component {\r\n\tconstructor(props) {\r\n\t\tsuper(props);\r\n\t\t\tthis.state = {\r\n\t\t\t\tinput:''\r\n\t\t\t};\r\n\t};\r\n\r\n\tonChangeI = (e) =>{\r\n\t\tthis.props.onChangeI(e.target.value, e.target.name);\r\n\t}\r\n\r\n\tonSubmit = (e) => {\r\n\t\te.preventDefault();\r\n\t\tthis.props.cardInfo();\r\n\t}\r\n\t\r\n\trender() {\r\n\t\tconst form = config.questions.map((item, index) => {\r\n      const result =[];\r\n      const title=item.title;\r\n      const fields = item.fields;\r\n      result.push((\r\n        <div key={`${title.length}-${index}`}>\r\n          <Title\r\n            title={title}\r\n          />\r\n        </div>\r\n      ))\r\n      for(let i = 0; i<fields.length; i++) {\r\n\t\t\t\tconst nameJ = fields[i].name;\r\n\t\t\t\t// console.log( this.props.inputs[nameJ]);\r\n\t\t\t\t// console.log(`${title.length}-${index}-${i}`);\r\n\t\t\t\tif(fields[i].type !== 'dropdown') {\r\n\t\t\t\t\tresult.push((\r\n\t\t\t\t\t<div key = {`${title.length}-${index}-${i}`} className='input-field col s6' >\r\n\t\t\t\t\t\t<input \r\n\t\t\t\t\t\t\tonChange={this.onChangeI}\r\n\t\t\t\t\t\t\tvalue={this.props.inputs[nameJ]}\r\n\t\t\t\t\t\t\tname={fields[i].name} \r\n\t\t\t\t\t\t\ttype={fields[i].type}\r\n\t\t\t\t\t\t\tid='autocomplete-input' \r\n\t\t\t\t\t\t\tclassName='autocomplete' \r\n\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t<label htmlFor='autocomplete-input'>{fields[i].label}</label>\r\n\t\t\t\t\t</div>));\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tresult.push((\r\n\t\t\t\t\t\t\t<div className='input-field col s6' key = {`${title.length}-${index}-${i}`} >\r\n\t\t\t\t\t\t\t\t<SelectedOp \r\n\t\t\t\t\t\t\t\t\tvalue={this.props.valueSelect}\r\n\t\t\t\t\t\t\t\t\toptions={fields[i].options}\r\n\t\t\t\t\t\t\t\t\tonChangeS={this.props.onChangeS}\r\n\t\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t));\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n        return result;\r\n    });\r\n\t\treturn(\r\n\t\t\t<form className='row' onSubmit={this.onSubmit}>\r\n          <div className='col s12'>\r\n            {form}\r\n          </div>\r\n          <button type='submit' className='btn-large waves-effect waves-light  green lighten-1' name='action'>Submit\r\n            <i className='material-icons right'>send</i>\r\n          </button>\r\n        </form> \r\n\t\t);\r\n\t};\r\n};\r\n\r\n\r\nexport default Form;","import React from 'react';\r\n\r\nconst CardInfo = (props) => {\r\n\r\n\tconst cardInfo = props.infoState;\r\n\tconst divStyle = {\r\n\t\tdisplay: props.style,\r\n\t};\r\n\treturn (\r\n\t\t<div className='row' style={divStyle}>\r\n\t\t\t<div className='col s12 m12'>\r\n\t\t\t\t<div className='card blue lighten-5'>\r\n\t\t\t\t\t<div className='card-content  blue-grey-text text-darken-2'>\r\n\t\t\t\t\t\t<h4>Tu Informaci√≥n</h4>\r\n\t\t\t\t\t\t<div className='left-align'>\r\n\t\t\t\t\t\t\t<p>First Name: {cardInfo.first_name} </p>\r\n\t\t\t\t\t\t\t<p>Last Name: {cardInfo.last_name} </p>\r\n\t\t\t\t\t\t\t<p>Country: {cardInfo.selectedOption.value} </p>\r\n\t\t\t\t\t\t\t<p>Email: {cardInfo.email} </p>\r\n\t\t\t\t\t\t\t<p>Phone Number: {cardInfo.phone_number}</p>\r\n\t\t\t\t\t\t\t<p>Post Code: {cardInfo.post_code}</p>\r\n\t\t\t\t\t\t\t<p>Street Address: {cardInfo.street_address}</p>\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t);\r\n};\r\n\r\nexport default CardInfo;","/* eslint-disable array-callback-return */\r\nimport React, { Component } from 'react';\r\n\r\nimport './App.css';\r\n\r\n// import config from '../config/config.json';\r\n\r\nimport Form from './form';\r\nimport CardInfo from './card';\r\n\r\nclass App extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      first_name:'',\r\n      last_name:'',\r\n      email: '',\r\n      phone_number: '',\r\n      street_address: '',\r\n      post_code:'',\r\n      selectedOption: '',\r\n      styleCard: 'none'\r\n    };\r\n  };\r\n\r\n  cardInfo = () => {\r\n    console.log(this.state);\r\n    this.setState({\r\n      styleCard:'block'\r\n    })\r\n\r\n  }\r\n\r\n  handleChange = (selectedOption) => {\r\n    this.setState({ selectedOption });\r\n    // console.log(`Option selected:`, selectedOption);\r\n  }\r\n\r\n  onChangeInput = (value, name) => {\r\n    this.setState({\r\n      [name]:value\r\n    });\r\n  };\r\n\r\n  render() {\r\n    const  inputs  = this.state;\r\n    const { selectedOption, styleCard } = this.state\r\n    return (\r\n      <div className='App'>\r\n        <Form\r\n          inputs={inputs}\r\n          valueSelect={selectedOption}\r\n          cardInfo={this.cardInfo}\r\n          onChangeI={this.onChangeInput}\r\n          onChangeS={this.handleChange}\r\n        />\r\n        <CardInfo\r\n          style={styleCard}\r\n          infoState={inputs}\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './components/App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: http://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}